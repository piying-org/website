{
  "5010537385816875614": "**如果您符合以下条件,那么您可以尝试以下皮影**",
  "8412000689545871692": "**如果您符合以下条件,那么皮影就适合您**",
  "3845628124501689714": "[valibot](https://valibot.dev/guides/mental-model/)中的概念",
  "3725591429090425021": "`#` 查询根级配置",
  "4113782251005630579": "`..` 查询父级\n> 任何情况下`['aa']`都表示查询当前级别的自己为`aa`的控件,所以如果要查询同级别的控件,需要`['..','aa']`",
  "1395061638591271723": "`@xx` 查询别名为`xx`的控件\n> 当创建了一个数组项时,别名会创建一个单独的Map保存,如果查询不到的情况下,才会查询父级",
  "6598202871436380788": "`asyncValidators`异步表单验证",
  "4411053764251150929": "`cva`用于外部自动绑定",
  "6491908673577759423": "`cvaa`用于和现有的表单控件进行绑定",
  "2238330843842140472": "`deletionMode`array子项被删除时,应该设置为undefined还是跳过;默认为跳过",
  "7407254321873464146": "`disabledValue`禁用时值是否删除(默认删除)",
  "4155813805759541408": "`disabled`是否禁用",
  "4807674892919679758": "`emptyValue`当值为空时,返回的默认值\n> 仅适用于`array/group/logic group`",
  "1188943212461243169": "`field.statusChanges`可以监听模型值变更",
  "2716168256524936229": "`field.valueChanges`可以监听模型值变更",
  "3919685533196953785": "`hidden`控制是否隐藏",
  "8009353098870898924": "`list`属性接受一个路径或者undefined,通过路径查询到对应控件并监听输入值变更",
  "5776185434218354072": "`object`/`intersect`/`union`/`tuple`/`array`等可以包含子组件的Schema",
  "4470030639577542698": "`patchAsync`动态设置某些值,可以读取到field和上下文,支持`Promise`/`Observable`/`Signal`;非上述类型的值会直接返回",
  "2705414149463736262": "`patch`与已有配置合并({...a,...b})\n> 需要注意的是,如果之前存在字段`xx`的配置,再次设置`xx`时,之前的值会被替换",
  "6631169515952339735": "`pipe`输出值时可以进行防抖处理(rxjs pipe)",
  "7157616577299485084": "`priority`表示优先级,数字越小,位置越靠前",
  "5375731654841658008": "`remove`删除某一项",
  "8765893958173617642": "`set`替换当前输入设置",
  "6305542520898877390": "`signal`类型的值需要转换为`ref`才支持动态变更",
  "1432372443952387797": "`transfomer`输入/输出值时进行转换",
  "5736131001182624386": "`updateOn`合适输出值",
  "8092751764605584214": "`v.intersect()`+`asVirtualGroup`可以进行多级虚拟组",
  "4862556518007206733": "`valibot`的可以同时提供类型与验证",
  "362221883486026609": "`validators`表单验证\n> 推荐使用`valibot`的`v.check`",
  "9104834737937258726": "builder实现在源码`src/app/component/form/formly/translate.builder.ts`中",
  "8506936725857513883": "formik 迁移",
  "9082023173940517025": "ngx-formly 迁移",
  "8977992715275135017": "react-hook-form 迁移",
  "8132394158327439351": "submit/debounce不直接支持,但可以使用其他逻辑代替",
  "7297245665835292883": "valibot的验证会先工作,验证成功后,再执行控件验证",
  "7015531191039297663": "valibot验证",
  "73906890455136876": "vee-validate 迁移",
  "7124564648409890694": "一般为适配不同的库/框架时使用",
  "2695741515345689644": "上下文",
  "6205485088998907091": "不同框架的组件实现不同,所以需要单独实现",
  "162365918824879785": "与`hideWhen`,`disableWhen`类似,支持多个控件监听",
  "7144240952861836189": "与`topClass`类似,只不过是设置组件自身的",
  "910779403902234938": "与`valueChange`类似",
  "535154158469991585": "与大家理解的组件一致",
  "6511725295967825409": "为什么使用皮影?",
  "8916537472669748089": "举例",
  "5700106879060710544": "之后的使用与typeorm完全相同,也就是由之前的装饰器声明改为现在的`valibot`定义声明",
  "4940897137127057103": "也可以使用group只在专门的组中进行验证",
  "2119146926133144794": "事件输出",
  "2370971840764051165": "事件输出允许同时监听多个组件,多个输出,然后根据其输出逻辑关系处理",
  "2821900253069411107": "任何情况下,您都可以将指定类型定义外加入`v.array()`,表明为一个数组",
  "6169673985170922788": "传入一个`string[]`,比如`['aa','bb']`",
  "1137984121943662985": "但是经过注册之后,逻辑部分完全不依赖视图中的任何内容,方便未来的迁移与维护",
  "1029023685462150272": "使开发者更加关注于逻辑和布局,从琐碎事物中解放出来",
  "4362706441482076330": "使用",
  "2614371932351079648": "使用`defer`动态创建控件",
  "2379821979264704524": "使用`intersect`时,会自动创建一个`LogicGroup`,使用此方法可以不创建控件组,而是一个普通的分组(等价于v.object)",
  "8363812595432782256": "使用`v.array(v.string())`时,如果不想表示为`FieldArray`,而是仅仅想视为一个普通的类型`FieldControl`时使用",
  "3293556844005822763": "使用`valueChange`监听控件并进行变更",
  "2717337146994444101": "使用object可以进行多级数据结构定义",
  "4906175811249072254": "使用展示",
  "7460961669942764224": "使用此声明后,一定要使用`setComponent`手动指定一个确定的组件名",
  "1690593954229013269": "使用过不代表发射过值,可能是点击过一次,一般为触发`blur`后变成`touched`",
  "1385309905832843089": "值变化",
  "7539788671656705072": "值变更时修改表单其他值",
  "680312537850246143": "值变更监听",
  "744543685870474142": "值恢复为默认值(如果没有传入)",
  "6025431985508552731": "允许启用部分子级",
  "968701223811806626": "关键字",
  "115620263628314702": "其中`intersect`配合`asVirtualGroup`可以创建一个逻辑上的普通分组,方便布局",
  "7886923473470595928": "减少代码编写与维护成本",
  "2095256808838468994": "减少对底层框架依赖使得代码更加通用",
  "8225983412930701792": "几乎所有的`皮影Action`都来源于此Action",
  "6612840890007855543": "分区禁用",
  "453488653227783738": "分发到FieldControl级`updateValue`",
  "5423159681680587432": "分组",
  "6503772594833286737": "创建多个组件",
  "8803694132217552613": "动态变更,支持Promise,Observable",
  "2199030438708211389": "动态解析部分",
  "2949907352473512786": "包含输入值`writeValue`,值变更注册函数`registerOnChange`,已用状态注册函数`registerOnTouched`,是否禁用`setDisabledState`",
  "776239771134497672": "包装器",
  "4760210203036118453": "包装器可以让组件拥有额外能力",
  "5172621049005916864": "包装器让开发者在封装组件的时候可以仅考虑该组件的基本功能,减少了代码耦合,增加了可维护性",
  "2524471733249523260": "变更监听",
  "114311007129277470": "只能验证自身,无法以上下文值来验证\n> 如果要通过上下文来验证只能将验证写到父级",
  "1397180211717585555": "可以使用`v.check`自定义验证",
  "8748914583681704519": "可以使用`wrapper`套一层实现",
  "4532287389479432541": "可以参考`formConfig`Action中的`validators`,`asyncValidators`",
  "3651018542783350810": "可以控制组件隐藏时,是否禁用控件",
  "2581458878695511711": "可以访问到父级,根据其他字段的值判断",
  "474774252514192179": "可以通过依赖注入/上下文等方式查询`PI_VIEW_FIELD_TOKEN`,获取当前定义配置",
  "5379927071334708594": "各个`小程序`便是视图/逻辑分离的,需要使用静态解析先生成模板",
  "4589716347438821368": "和正常开发时完全一样,在定义处配置input/output及其他属性传入",
  "307240789270475179": "国际化",
  "101391695118785140": "基本等价于`Record<string,any>`",
  "3302785712164298218": "基本等价于`any[]`",
  "5100525730061425158": "外键引用",
  "7002639287169650545": "大部分[formik](https://formik.org/)用例已被实现",
  "1445583293361222639": "大部分[react-hook-form](https://react-hook-form.com/)用例已被实现",
  "4684763114963851055": "大部分[vee-validate](https://vee-validate.logaretm.com/v4/)用例已被实现",
  "1390322479774070306": "大部分的表单控件,输入输出是等价的,也就是控件输入`a`=>发射输出`a`,传入`a`=>写入到控件中`a`",
  "487050286487460845": "如果值没有异常/没有禁用或维持之前的值,那么可以发射获取到,否则跳过",
  "7063445168910863237": "如果值禁用,不发射值",
  "4614411276941932807": "如果您有相关开发经验,可以先拉取相关模板查看源码",
  "1309088439206701149": "如果您遇到相关迁移问题,欢迎反馈",
  "3128056493328850661": "如果提供的Action不满足您的开发需要,可以自行封装",
  "3975329606844517378": "字段分组",
  "4707791770500562346": "安装",
  "225409283241877336": "安装以下依赖",
  "3552506689223504236": "完全兼容`valibot`中的所有验证Action",
  "4328178203921815141": "定义结构通用",
  "3481468223856261201": "实现`组件`的时候,只需要实现最核心的组件内容即可,不需要将验证/标签/提示内容一并实现",
  "6638605237028209118": "实现与ngx-formly官网例子一样的用例",
  "1506603881572189839": "实现了多个包装器,就可以通过排列组合使组件产生多种显示效果,并且减少代码耦合,易于维护",
  "3110630370524537134": "实现方式与`Advanced Layout`相同",
  "3713218421079785836": "客户端",
  "2340391657337809349": "客户端与服务端的元数据定义不会产生冲突,可以将不同场景的元数据定义在一块,统一验证和类型,减少沟通成本",
  "2839668173576519178": "客户端介绍",
  "4268176488185084713": "小部分场景因为视图和逻辑分离,所以需要使用静态解析,将定义先解析为对应模板并写入文件,再配合动态解析赋值",
  "5132124811836452766": "嵌套定义",
  "5413246865473526746": "市面上绝大多数的表单,都没有类型,往往设计表单后,还需要重新写一个类型来对输入输出进行约束",
  "7343278444451428466": "布局移动",
  "3809920437268872967": "希望未来代码拥有不同框架的可迁移性",
  "374306519133786673": "平台无关,同一个定义可以可以被多个框架使用",
  "567250261954736802": "当前后端均使用js开发时,往往遇到一个问题,就是后端的类型已经定义,但是后端返回的接口往往只有`interface`/`type`,更甚者可能连类型都没有,只是告诉有哪些字段",
  "3382540454341591138": "当前后端或者其他输入解析也需要此验证时,建议使用",
  "8834528211326730134": "当前支持",
  "7364950739177326435": "当表单部分字段在某些场景可以/不可以被填写时使用",
  "5446537984736255754": "当需要调整多个组件的布局,样式及相关显示时,就需要分组\n> `object`/`intersect`/`union`/`tuple`/`array`类型时可使用",
  "8188504147277309000": "当验证比较复杂,希望在当前控件上处理时,建议使用",
  "2463240481454031191": "必须实现部分,用来将定义动态解析为配置",
  "7294049377722786661": "快速开始",
  "9089392007205821708": "您也可以自定义object组件,修改显示方式",
  "4765646126677866654": "您可以简单的理解为元数据设置",
  "3005031519844821020": "您可以访问[formik-migration](https://piying-org.github.io/formik-migration/)查看用例对照",
  "8788809178570272365": "您可以访问[react-hook-form-migration](https://piying-org.github.io/react-hook-form-migration/)查看用例对照",
  "3797350592871670720": "您可以访问[vee-validate-migration](https://piying-org.github.io/vee-validate-migration/)查看用例对照",
  "9064739616984463993": "所有库/框架都实现了最基础的`PiyingViewGroup`,但这个并没有任何样式,排版,所以往往需要按要求自定义",
  "1047498010145358144": "所有的设置操作,都是基于`rawConfig`封装,该方法允许修改很多底层设置,方便开发者自行定义",
  "5465334838190556816": "所有要使用的组件,最好都在配置中先进行注册,方便引用",
  "2830977981871555039": "打开你的项目进行查看",
  "1919759939723675241": "控件",
  "7795916880776255786": "控件使用过/未使用过",
  "5354614879321574496": "控件发出值使用;直接使用仅会模拟发出值,视图部分不变",
  "1687569991007947524": "控件发射过值/未发射过值",
  "606899609963268264": "控件的值目前验证有效/无效/正在验证中",
  "1492717589176276329": "控件自带验证",
  "6456124296692621622": "控制`控件`何时禁用,支持多控件监听",
  "6298819955888704613": "控制`组件`何时隐藏",
  "8437133365005831241": "支持valibot验证/自定义验证,与表单自定义验证",
  "7753728397451924514": "支持自动解析嵌套定义,转换为表定义",
  "4168624687289523901": "数组",
  "3227391238436785570": "是否禁用",
  "4275785325654317450": "普通组件",
  "7877949494226542208": "更加方便的验证机制",
  "4784491009468222538": "更多支持待实现",
  "2395404919385499367": "服务端",
  "2539537157883153440": "服务端介绍",
  "2445983431105943030": "权重越大,组件越靠后",
  "8152002435617929948": "查看",
  "4360347568520305234": "查询方法",
  "7013081777799027431": "树实体定义引用",
  "8106903195162391340": "根级`updateValue`",
  "8522361668357636719": "概念",
  "6535642163714285376": "模型到视图",
  "2405900560793537941": "模板实例",
  "3527678917567115449": "此功能在组件中也可以使用,由于组件中不需要考虑类型,所以很容易进行各种排版;但是表单中往往是数据结构与视图布局不一致,这时候就需要在保证数据结构正常的前提下,移动组件",
  "7815048335453190777": "此方法也支持直接指定组件定义,但是不推荐,因为会让维护变的困难\n> 除非此组件仅在此地方使用并且只使用一次,否则还是建议先注册再使用",
  "1972490448761244080": "此方法单纯为表单更新值,也就是模型到视图",
  "273695716961833550": "此概念[来源](https://valibot.dev/guides/mental-model/)于`valibot`",
  "6421390813137566869": "此类方法都是用来设置组件相关属性",
  "1763898646512759828": "比如JsonSchema中的`anyOf`,`oneOf`,可以轻松使用`v.intersect`,`v.union`对应的`FieldLogicGroup`进行动态切换处理",
  "154151431220121768": "注册组件",
  "54978990630644301": "滚动组",
  "945863999624144498": "状态",
  "8453387105142299540": "用于调整表单控件使用,非表单控件不需要",
  "8787739137583531710": "由于存在`wrapper`,所以布局的时候,顶层的组件不一定是定义组件,而有可能是wrapper,所以就需要使用此类进行设置",
  "1817036115592330459": "由于类型安全的原因,设计上不支持切换",
  "2533280580905361738": "皮影为不同框架提供统一的表单开发体验",
  "7637968389472122461": "皮影允许在这两个阶段内分别进行处理,完成更复杂的业务逻辑",
  "5161075576289529940": "皮影可以用在哪里?",
  "2484941805385105442": "皮影在所有库/框架上都实现了`ControlValueAccessor`(来自Angular)的概念,通过实现相关方法,使组件能够自动接入控件",
  "7789523330151719193": "皮影如何支持不同平台",
  "2493761949270948335": "皮影完全兼容`valibot`的所有Action,可以完美的利用其验证及转换机制",
  "7636767885225758128": "皮影对于大多数普通的表单功能都已经完全覆盖,所以下面列举的问题是皮影相较于主流库而言解决",
  "7968906376000502175": "皮影成功解决了这个问题,使得定义与视图并非耦合关系,允许任意显示与调整\n> 这样,你就可以定制属于设计要求的表单而不是有限的展示",
  "1441961653256688942": "皮影是一个依赖 valibot 的元数据定义遍历/解析器",
  "281676609128782551": "皮影是什么?",
  "5921239532975014120": "皮影的相关设置更加语义化,减少开发心智;并允许自定义封装",
  "5347825626122550327": "皮影目前仅实现了`typeorm`的兼容",
  "7787939913870368146": "皮影解决了哪些问题?",
  "3078219601194290126": "监听控件的值变更",
  "2409706136399915545": "直接与组件绑定的类,表单中的最基础单位",
  "4387785588122997235": "确保当前项目可以正常运行",
  "9022547548969003731": "禁用状态取决于两个值,自身是否禁用和父级是否禁用,满足其一即禁用",
  "3037208995363320451": "移动组件到指定的位置",
  "4887833217848144520": "第一次监听的值默认为undefined(假如没有设置默认值),所以需要跳过",
  "8104873820233867115": "简化 orm 定义",
  "8503537271966715252": "类型",
  "319757566946000054": "类型安全",
  "1940695139573952801": "类型安全,验证",
  "817346401648530873": "级联",
  "3353987121576643334": "组件",
  "1703399233571506045": "组件中实现了`ControlValueAccessor`的组件",
  "9162775487966748992": "组件中获取配置实例",
  "2864635957462559808": "组件使用",
  "2684611969604945135": "组件实现",
  "3586633598391480504": "组件注册支持懒加载",
  "2160878348380850726": "组件的快速布局,融合监听,自动懒加载,包装修饰",
  "2613907245914625651": "绑定表单",
  "5493866923233199135": "绝大多数表单,只做了`Group`,`Array`,`Control`三种控件,但是缺少了逻辑或/与,这就让某些逻辑实现变得复杂",
  "7009354589966945087": "绝大多数表单,都没有类型安全,即使使用了元数据定义,也无法随意移动,只能根据定义顺序来显示组件",
  "8451275557950126171": "统一前后端的类型及验证",
  "2790194754255961960": "自定义创建表单组控制内部表单的显示",
  "1449128930929163424": "融合",
  "6713287036079310806": "表单",
  "5187765671250522473": "表单中带`$$`属于`Signal`",
  "6654092053584961242": "表单使用",
  "9215945142942412391": "表单控件的model-view/view-model分离",
  "3603990046363629496": "表单的类型安全,输入/输出转换,验证,分区禁用",
  "5401644757041843989": "表单的类型安全实现",
  "6143418680809879742": "视图到模型",
  "7124801705648377725": "视图变更",
  "5872302164117362901": "视图变更过?强制更新:仅与上次不同才更新,同时设置表单值",
  "588875283703603349": "视图逻辑分离",
  "8468751852537010668": "触发值变更,开启异步获取值",
  "6516540704804860442": "让组件附加额外的能力,比如显示控件的标签,验证内容,前后缀等组件相关,共通的东西",
  "1272938189012298083": "设置别名,用于路径查询",
  "1192900917152810887": "设置后状态恢复到`untouched`,`pristine`",
  "8402003515067659904": "设置设置表单值",
  "3014408415754019309": "设置输入属性",
  "9099612979882518592": "该函数输入为一个函数,其输入变量为当前的`SchemaHandle`,可以处理所有暴露的变量",
  "1231540176232516907": "请参考`JSON Schema`实现",
  "600735488962707912": "调用",
  "7694252381790420250": "路径查询",
  "6429650137716363702": "路径查询在`outputChange`,`valueChange`,`hideWhen`,`disableWhen`等Action中被使用",
  "8296903281769967667": "输出转换",
  "2341205884529028245": "过滤组",
  "2139968651747675907": "进行`valibot`解析,解析失败会写入验证异常,标记为`dirty`",
  "2167079586077256140": "进行rxjs管道处理`pipe.toModel`",
  "314304491980374487": "进行模型到视图转换(`transfomer.toView`),允许输入值在写入到视图时进行修改",
  "4909173552783547282": "进行转换处理`transfomer.toModel`\n> 这两个未来可能合成为一个,因为管道可以实现的更多,比如防抖",
  "6284504305697969947": "适用于Orm场景",
  "5822582136818176348": "通过`convert`导出`dataSource`实例与注册`实体`",
  "7892116980067536207": "通过`valibot`定义,可以天然的获取到类型,并且获得最基础的类型验证,保证任何情况下,数据的类型没有问题",
  "8140900748365645999": "通过`valueChange`监听指定控件,更新控件值",
  "903384071175009273": "通过传入`context`使得组件可以通过上下文动态获取参数",
  "211474697240626646": "通过使用`field.get([])`可以查询定义的`组件`配置\n> 即使非表单控件,也可以查询,只不过返回的配置中没有控件引用",
  "4401278516210119299": "通过分组可以定义`card`,`tabs`,`navbar`等容器,使控件以不同风格展示\n> 在一定程度上替代了[slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/slot)",
  "4822148391498864378": "通过定义不同的元数据与元数据解析器,适应不同工作场景",
  "8449255988302560808": "通过指定元数据定义,使得类型安全定义可以被解析并被orm使用",
  "3963725331977485171": "通过添加元数据支持,使得Orm定义与类型定义合二为一,方便管理",
  "2224996665555967134": "通过皮影的解析加持后,相关验证可以完美的反馈到表单上,使前后端的检查相同,减少维护成本,提高了数据的安全性",
  "1109032047741382816": "逻辑或/与",
  "4386449032482258827": "需要注意的是,被移动的位置一定要先被解析",
  "8929633343167762652": "需要自己在实现验证的`包装器`,`分组`上自行实现国际化",
  "4870486845916972510": "静态属性",
  "6701610097321275225": "静态解析部分",
  "383177531944524816": "非表单控件组件",
  "8270306090149119799": "页面之间有一些相似的逻辑,或某些代码看起来相似",
  "9140568832968454150": "预制的验证Action,`valibot`上已经存在国际化",
  "6199461778127369329": "验证",
  "6782449427950026009": "验证和控件组件完全解偶,需要自行实现,只提供相关控件状态",
  "8931984317790526076": "高级自定义",
  "5119919885418919135": "默认下动态解析后,大多数场景都可以直接使用",
  "6735707648165510781": "默认下直接触发变更,设置`updateOn:'blur'`后要等待`touched`发射",
  "7727666512987859558": "默认为替换当前类,也可以设置`true`合并已有类",
  "5144760924156081460": "默认值",
  "9031301241060936147": "默认情况下,比如使用`v.string()`时,会自动查找注册的`string`配置;但是您也可以使用此方法手动指定",
  "7063127021049097214": "默认情况下,由于valibot为强类型定义,所以所有输入默认为表单控件,如果想要定义为非表单控件,可以使用`v.optional(v.void())`,表示一个不可能的值",
  "6654936285331109296": "默认提供了一个基础的object组件,用来展示内部子组件",
  "8044044696511750096": "游乐场",
  "9082781386050595065": "预览",
  "3967836601573629321": "代码",
  "7304804787084703335": "首页",
  "5663341488582522474": "文档",
  "7807636449017554161": "介绍",
  "9216117865911519658": "Action",
  "6347577505140945932": "组件使用(用例)",
  "6437329570367970266": "表单使用(用例)",
  "3793258136716602256": "差异",
  "1298133550706786507": "Vue",
  "1407426312530771175": "React",
  "8689675581665875697": "前端表单解决方案",
  "5908126940154456003": "皮影提供了可以在任意平台上使用的\n          <br />\n          快速组件布局,定位,事件融合监听及\n          <br />\n          表单设计,验证,分区禁用,类型安全等功能",
  "2562848814003371959": "查看用例",
  "6524332794911304168": "评价",
  "6270788596078726352": "使用皮影"
}