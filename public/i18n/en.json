{
  "3845628124501689714": "Concepts from [valibot](https://valibot.dev/guides/mental-model/)",
  "3725591429090425021": "`#` Query root-level configuration",
  "4113782251005630579": "`..` Query parent level  \n> In any case, `['aa']` represents querying the control whose name is `aa` at the current level. Therefore, if you want to query controls at the same level, you need to use `['..','aa']`.",
  "1395061638591271723": "`@xx` queries the control with the alias `xx`  \n> When an array item is created, the alias creates a separate Map to store it. Only if the query fails, it will then query the parent.",
  "6598202871436380788": "`asyncValidators` Asynchronous Form Validation",
  "6574109078389591972": "Update when `touchend` triggers (typically triggered by a blur event)",
  "3871154599357482551": "Update when the `change` control value change is emitted",
  "4411053764251150929": "`cva` is used for external automatic binding.",
  "6491908673577759423": "`cvaa` is used to bind with existing form controls.",
  "2238330843842140472": "When an item in the `deletionMode` array is deleted, it should be set to `undefined` or skipped; the default is to skip.",
  "7407254321873464146": "`disabledValue` Whether the value is removed when disabled (default is removed)",
  "4155813805759541408": "`disabled` disabled",
  "4807674892919679758": "`emptyValue` The default value returned when the value is empty  \n> Applies only to `array/group/logic group`",
  "1188943212461243169": "`field.statusChanges` can listen for changes in the model value.",
  "2716168256524936229": "`field.valueChanges` can listen for changes in the model value.",
  "3919685533196953785": "`hidden` controls whether to hide or not.",
  "8009353098870898924": "The `list` attribute accepts a path or undefined. It queries the corresponding control through the path and listens for changes in the input value.",
  "5776185434218354072": "Schemas that can contain sub-components, such as `object`/`intersect`/`union`/`tuple`/`array`",
  "4470030639577542698": "`patchAsync` dynamically sets certain values, which can access the field and context, and supports `Promise`/`Observable`/`Signal`; values of types other than the above will be returned directly.",
  "2705414149463736262": "`patch` merges with the existing configuration({...a,...b})\n> Note that if there was a previous configuration for field `xx`, setting `xx` again will overwrite the previous value.",
  "6631169515952339735": "When outputting the value of `pipe`, debouncing can be applied (rxjs pipe)",
  "7157616577299485084": "`priority` indicates the priority level; the smaller the number, the earlier the position.",
  "5375731654841658008": "`remove` Delete an item",
  "8765893958173617642": "`set` replaces the current input settings",
  "6305542520898877390": "Values of the `signal` type need to be converted to `ref` to support dynamic changes.",
  "1355092974482054796": "Update after calling the `emitSubmit` method of the `submit` control (typically invoked after the form's submit event)",
  "1432372443952387797": "Convert input/output values of `transfomer`",
  "5736131001182624386": "The appropriate output value for `updateOn`",
  "8092751764605584214": "`v.intersect()` + `asVirtualGroup` can perform multi-level virtual groups",
  "362221883486026609": "`validators` form validation  \n> It is recommended to use `valibot`'s `v.check`",
  "9104834737937258726": "The builder is implemented in the source code `src/app/component/form/formly/translate.builder.ts`.",
  "8506936725857513883": "formik Migration",
  "1226656929959948072": "Native attributes in HTML tags",
  "9082023173940517025": "ngx-formly migration",
  "8977992715275135017": "react-hook-form Migration",
  "1955247720079056793": "React-TanStack Migration",
  "8132394158327439351": "submit/debounce is not directly supported, but can be replaced with other logic.",
  "7297245665835292883": "Valibot's validation will take effect first. After the validation is successful, the control validation will be executed.",
  "7015531191039297663": "valibot validation",
  "73906890455136876": "vee-validate Migration",
  "7124564648409890694": "Generally used when adapting to different libraries/frameworks.",
  "2695741515345689644": "Context",
  "162365918824879785": "Similar to `hideWhen` and `disableWhen`, it supports multiple controls for listening.",
  "7144240952861836189": "Similar to `topClass`, but used to set the component's own class.",
  "910779403902234938": "Similar to `valueChange`",
  "535154158469991585": "Consistent with the components as understood by everyone.",
  "3038796434602271152": "Provide a unified form development experience across different frameworks",
  "8916537472669748089": "For example",
  "5700106879060710544": "The subsequent usage is the same as with typeorm, that is, changing from the previous decorator declaration to the current `valibot` definition declaration.",
  "4940897137127057103": "You can also use group to perform validation only in specific groups.",
  "2119146926133144794": "Event Output",
  "2370971840764051165": "Event output allows listening to multiple components and multiple outputs at the same time, and then processes them based on their output logic relationships.",
  "2821900253069411107": "In any case, you can add `v.array()` to define a type that is not specified in the type definition, indicating it as an array.",
  "6169673985170922788": "Pass in a `string[]`, for example `['aa','bb']`",
  "1029023685462150272": "Enable developers to focus more on logic and layout, freeing them from trivial matters.",
  "4362706441482076330": "Use",
  "2614371932351079648": "Create controls dynamically using `defer`",
  "2379821979264704524": "When using `intersect`, a `LogicGroup` is automatically created. Using this method allows you to create a regular group instead of a control group (equivalent to `v.object`).",
  "8363812595432782256": "When using `v.array(v.string())`, if you do not want to represent it as `FieldArray`, but instead just want to treat it as a regular type `FieldControl`, use",
  "3293556844005822763": "Use `valueChange` to listen to the control and handle changes.",
  "2717337146994444101": "You can use object to define multi-level data structures.",
  "4906175811249072254": "Use Display",
  "7460961669942764224": "After using this declaration, you must manually specify a definite component name using `setComponent`.",
  "1690593954229013269": "Using it does not necessarily mean that a value has been emitted; it could simply mean that it was clicked once. Generally, it becomes `touched` after triggering `blur`.",
  "1385309905832843089": "Value change",
  "7539788671656705072": "Modify other values in the form when the value changes",
  "680312537850246143": "Value Change Listener",
  "744543685870474142": "Value is restored to the default value (if not provided)",
  "1006437792698791656": "Update timing (updateOn)",
  "7979054654573832849": "The ControlValueAccessor is a design used to connect form controls with components, originating from [Angular](https://angular.dev/api/forms/ControlValueAccessor).",
  "6025431985508552731": "Allow enabling partial child nodes",
  "968701223811806626": "Keyword",
  "115620263628314702": "In which `intersect` combined with `asVirtualGroup` can create a logical normal group, facilitating layout.",
  "8225983412930701792": "Almost all `Piying Action` originates from this Action.",
  "6612840890007855543": "Partition Disable",
  "453488653227783738": "Distribute to FieldControl level `updateValue`",
  "5423159681680587432": "Grouping",
  "6503772594833286737": "Create multiple components",
  "8803694132217552613": "Dynamic change, supports Promise, Observable",
  "2199030438708211389": "Dynamic parsing part",
  "2949907352473512786": "Includes input value `writeValue`, value change registration function `registerOnChange`, used status registration function `registerOnTouched`, and disabled state `setDisabledState`",
  "776239771134497672": "Wrapper",
  "4760210203036118453": "The wrapper allows the component to have additional capabilities.",
  "5172621049005916864": "The wrapper allows developers to focus only on the basic functionality of the component when encapsulating it, reducing code coupling and improving maintainability.",
  "2524471733249523260": "Change Listening",
  "114311007129277470": "Can only verify itself, cannot verify using context values  \n> If you want to verify using context, you can only write the verification in the parent level",
  "1397180211717585555": "You can use `v.check` for custom validation.",
  "8748914583681704519": "You can use `wrapper` to wrap it once.",
  "4532287389479432541": "You can refer to the `validators` and `asyncValidators` in the `formConfig` Action.",
  "3651018542783350810": "Can control whether the component is disabled when it is hidden.",
  "2581458878695511711": "Can access the parent, and determine based on the values of other fields.",
  "474774252514192179": "It is possible to query `PI_VIEW_FIELD_TOKEN` through methods such as dependency injection or context to obtain the current definition configuration.",
  "5379927071334708594": "Each `mini program` is separated into view/logic, and requires static parsing to generate the template first.",
  "4589716347438821368": "It is exactly the same as during normal development, configuring input/output and other properties at the definition location.",
  "307240789270475179": "Internationalization",
  "3462149794073679144": "When using `v.object({})`, the field order in modern browsers (excluding IE11) is predictable: non-negative integer keys are prioritized in ascending order, followed by keys in the order they were defined.  \n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",
  "101391695118785140": "Essentially equivalent to `Record<string, any>`",
  "3302785712164298218": "Essentially equivalent to `any[]`",
  "5100525730061425158": "Foreign Key Reference",
  "8462469311660633327": "Multiple wrappers can be combined in various ways to generate more diverse display effects for components, while reducing code coupling and making maintenance easier.",
  "7002639287169650545": "Most [formik](https://formik.org/) use cases have been implemented",
  "1445583293361222639": "Most use cases of [react-hook-form](https://react-hook-form.com/) have been implemented.",
  "544077418470170737": "Most [react-tanstack](https://tanstack.com/form/latest) use cases have been implemented",
  "4684763114963851055": "Most [vee-validate](https://vee-validate.logaretm.com/v4/) use cases have been implemented",
  "1390322479774070306": "Most form controls have equivalent input and output, meaning that inputting `a` into the control emits output `a`, and passing `a` writes `a` into the control.",
  "487050286487460845": "If the value is not abnormal, not disabled, or remains at the previous value, it can be emitted and acquired; otherwise, skip it.",
  "7063445168910863237": "If disabled, the value is not emitted.",
  "765239162614039149": "If you want to modify the display order of a field, in addition to adjusting the definition order, you can also use `layout({priority: -1})`. The default value is `0`. The smaller the value, the earlier it appears; the larger the value, the later it appears.",
  "4614411276941932807": "If you have relevant development experience, you can first pull down the relevant template to view the source code.",
  "1309088439206701149": "If you encounter any related migration issues, feel free to provide feedback.",
  "3128056493328850661": "If the provided Action does not meet your development needs, you can encapsulate it yourself.",
  "3975329606844517378": "Field Grouping",
  "611914505479014942": "Field order",
  "1738801626619575414": "The order of fields affects the display order of components.",
  "4707791770500562346": "Installation",
  "225409283241877336": "Install the following dependencies",
  "3552506689223504236": "Fully compatible with all validation Actions in `valibot`",
  "6566760398672362764": "Fully compatible with all Actions of `valibot`, allowing perfect utilization of its validation and transformation mechanisms.",
  "582811462610856728": "Define uniquely",
  "1331140998759919469": "Although the defined Schema types are fixed, the components corresponding to each definition can be moved.  \n> This way, you can create forms tailored to your design requirements, rather than being limited to predefined layouts.",
  "3481468223856261201": "When implementing the `component`, only the core content of the component needs to be implemented, without the need to also implement validation/label/prompt content.",
  "6638605237028209118": "Achieve the same use case as the example on the ngx-formly official website",
  "3110630370524537134": "The implementation is the same as `Advanced Layout`.",
  "3713218421079785836": "Client",
  "2340391657337809349": "The metadata definitions between the client and server will not conflict, allowing metadata definitions from different scenarios to be grouped together, with unified validation and types, thereby reducing communication costs.",
  "2839668173576519178": "Client Introduction",
  "4268176488185084713": "In some small scenarios, static parsing is required because the view and logic are separated. The definitions are first parsed into corresponding templates and written to files, then combined with dynamic parsing for assignment.",
  "5132124811836452766": "Nested definition",
  "7343278444451428466": "Layout Move",
  "374306519133786673": "Platform-agnostic, the same definition can be used by multiple frameworks.",
  "5913788669104605843": "And it can be completely independent of any content in the view, making it easy to migrate and maintain across different libraries/frameworks in the future.",
  "3382540454341591138": "It is recommended to use this verification when front-end, back-end, or other input parsing also requires it.",
  "8834528211326730134": "Current Support",
  "7364950739177326435": "Use when certain fields in a form can or cannot be filled in certain scenarios.",
  "5446537984736255754": "When it is necessary to adjust the layout, style, and related display of multiple components, grouping is required.  \n> Can be used when working with `object`/`intersect`/`union`/`tuple`/`array` types.",
  "8188504147277309000": "When validation is more complex and needs to be handled on the current control, it is recommended to use",
  "2463240481454031191": "Must-implement part, used to dynamically parse the definition into configuration",
  "7294049377722786661": "Quick Start",
  "9089392007205821708": "You can also customize the object component and modify the display method.",
  "4765646126677866654": "You can simply understand it as metadata settings.",
  "3005031519844821020": "You can visit [formik-migration](https://piying-org.github.io/formik-migration/) to view the use case comparison.",
  "8788809178570272365": "You can visit [react-hook-form-migration](https://piying-org.github.io/react-hook-form-migration/) to view the use case comparison.",
  "8002117704968980938": "You can visit [react-tanstack-migration](https://piying-org.github.io/react-tanstack-migration/) to view the use case comparison.",
  "3797350592871670720": "You can visit [vee-validate-migration](https://piying-org.github.io/vee-validate-migration/) to view the use case comparison.",
  "9064739616984463993": "All libraries/frameworks implement the most basic `PiyingViewGroup`, but this has no styling or layout, so it is often necessary to customize it according to specific requirements.",
  "1047498010145358144": "All configuration operations are based on `rawConfig`, which allows modifying many low-level settings and enables developers to define their own configurations freely.",
  "5465334838190556816": "All components to be used are best registered in the configuration first, for easier reference.",
  "2830977981871555039": "Open your project for viewing.",
  "1919759939723675241": "Control",
  "7795916880776255786": "Control Used / Not Used",
  "5354614879321574496": "The control emits values using; direct use will only simulate emitting values, and the view part remains unchanged.",
  "1687569991007947524": "Control has emitted value / has not emitted value",
  "606899609963268264": "The control's value is currently valid/invalid/being validated.",
  "1492717589176276329": "The control has built-in validation.",
  "6456124296692621622": "Control when the `Piying` is disabled, supports listening for multiple controls",
  "6298819955888704613": "Control when the `component` is hidden",
  "8437133365005831241": "Supports valibot validation / custom validation, and form custom validation",
  "7753728397451924514": "Support automatic parsing of nested definitions and convert them into table definitions",
  "4168624687289523901": "Array",
  "3227391238436785570": "Is it disabled?",
  "4275785325654317450": "Ordinary Component",
  "4784491009468222538": "More support to be implemented",
  "2395404919385499367": "Server",
  "2539537157883153440": "Introduction to the Server Side",
  "2445983431105943030": "The larger the weight, the later the component appears.",
  "8152002435617929948": "View",
  "4360347568520305234": "Query Method",
  "7013081777799027431": "Tree Entity Definition Reference",
  "8106903195162391340": "Root-level `updateValue`",
  "8522361668357636719": "Concept",
  "6535642163714285376": "Model to View",
  "2405900560793537941": "Template Instance",
  "3527678917567115449": "This feature can also be used in components. Since components do not need to consider types, it is easy to perform various layouts. However, in forms, the data structure often does not match the view layout. In such cases, we need to move components while ensuring the data structure remains normal.",
  "7815048335453190777": "This method also supports directly specifying the component definition, but it is not recommended as it can make maintenance more difficult.  \n> Unless this component is used only in this one place and only once, it is still recommended to register it first before using it.",
  "1972490448761244080": "This method is purely for updating form values, that is, model to view.",
  "273695716961833550": "This concept [source](https://valibot.dev/guides/mental-model/) is from `valibot`",
  "6421390813137566869": "These methods are used to set component-related properties.",
  "1763898646512759828": "For example, `anyOf` and `oneOf` in JsonSchema can be easily handled dynamically using the corresponding `FieldLogicGroup` with `v.intersect` and `v.union`.",
  "154151431220121768": "Register Component",
  "54978990630644301": "Scroll Group",
  "4540800242426995879": "Features",
  "945863999624144498": "Status",
  "8453387105142299540": "Used for adjusting form control usage; non-form controls do not require it.",
  "8787739137583531710": "Due to the existence of `wrapper`, when laying out, the top-level component may not necessarily be the defined component, but could be a `wrapper`, so it is necessary to use this class for configuration.",
  "1817036115592330459": "Due to type safety considerations, switching is not supported in the design.",
  "7637968389472122461": "Piying allows processing in these two phases separately, enabling more complex business logic to be completed.",
  "8764240188451861659": "Piying requires only a single Schema definition to address issues such as default values, validation, data types, and component styling and layout, making code management much more convenient.",
  "5161075576289529940": "Where can Piying be used?",
  "8515180292512734607": "Piying implements `ControlValueAccessor` across all libraries/frameworks. By implementing the relevant methods, the component can automatically integrate with form controls.",
  "7789523330151719193": "How does Piying support different platforms",
  "7636767885225758128": "Piying has already fully covered most of the common form functions, so the issues listed below are problems that Piying addresses compared to mainstream libraries.",
  "1441961653256688942": "piying is a metadata definition traverser/parser that depends on valibot",
  "281676609128782551": "What is Piying?",
  "5347825626122550327": "Piying currently only supports compatibility with `typeorm`.",
  "7787939913870368146": "What problems does Piying solve?",
  "3078219601194290126": "Monitor the value change of the control",
  "2315738666343864903": "In the current packaging, there are two main components:  \n`cva` (short for ControlValueAccessor), used for exporting auto-registration; developers only need to follow a fixed code pattern to export it.  \n`cvaa` (short for ControlValueAccessorAdapter), used for registering components. Although different implementations exist across various libraries/frameworks, the underlying principle remains the same: bind the corresponding values and events to the respective components.",
  "2409706136399915545": "Classes directly bound to components, the most basic unit in a form",
  "1649386923063805849": "The relevant settings are more semantic, reducing the cognitive load on developers, and allowing customizable encapsulation.",
  "4387785588122997235": "Ensure that the current project can run properly.",
  "9022547548969003731": "The disabled state depends on two values: whether the element itself is disabled and whether the parent is disabled. If either condition is met, the element is disabled.",
  "3037208995363320451": "Move the component to the specified position.",
  "4887833217848144520": "The initial listened value is default undefined (if no default value is set), so it needs to be skipped",
  "8104873820233867115": "Simplify orm definition",
  "8503537271966715252": "Type",
  "1940695139573952801": "Type safety, validation",
  "817346401648530873": "Cascade",
  "3353987121576643334": "Component",
  "1703399233571506045": "Components that implement `ControlValueAccessor`",
  "9162775487966748992": "Obtain the configuration instance within the component",
  "2864635957462559808": "Component Usage",
  "2684611969604945135": "Component Implementation",
  "3586633598391480504": "Component registration supports lazy loading.",
  "2160878348380850726": "Quick layout of components, merged listening, automatic lazy loading, package decoration",
  "2613907245914625651": "Bind Form",
  "5493866923233199135": "Most forms only implement three types of controls: `Group`, `Array`, and `Control`, but they are missing logical operators such as OR/AND, which makes certain logical implementations more complex.",
  "5832641937296301997": "Most forms, view sections, logic sections, and type sections need to be defined separately in order to function properly.",
  "2790194754255961960": "Customize form group control to manage the display of internal forms",
  "1449128930929163424": "Integration",
  "6713287036079310806": "Form",
  "5187765671250522473": "Fields in the form with `$$` belong to `Signal`",
  "6654092053584961242": "Form Usage",
  "9215945142942412391": "Separation of model-view/view-model in form controls",
  "3603990046363629496": "Type safety of forms, input/output conversion, validation, partitioned disable",
  "6143418680809879742": "View to Model",
  "7124801705648377725": "View change",
  "5872302164117362901": "Has the view changed? Force update: update only if different from the last time, and simultaneously set the form value.",
  "8468751852537010668": "Trigger value change, enable asynchronous value retrieval",
  "6516540704804860442": "Allow the component to attach additional capabilities, such as displaying the label of the control, validating content, and handling common aspects related to the component, such as prefixes and suffixes.",
  "1272938189012298083": "Set an alias, used for path queries.",
  "1192900917152810887": "After setting, the status is restored to `untouched`, `pristine`",
  "8402003515067659904": "Set form values",
  "3014408415754019309": "Set input properties",
  "4116791952393996719": "From a design perspective, `Props` can accomplish all tasks (provided they are properly defined); however, for better semantics, they are divided into various attributes. In actual development, you can implement them according to your own preferences.",
  "9099612979882518592": "The function takes as input a function whose input variable is the current `SchemaHandle`, capable of handling all exposed variables.",
  "1231540176232516907": "Please refer to the `JSON Schema` for implementation.",
  "600735488962707912": "Call",
  "7694252381790420250": "Path Query",
  "6429650137716363702": "Path queries are used in actions such as `outputChange`, `valueChange`, `hideWhen`, and `disableWhen`.",
  "8296903281769967667": "Output Conversion",
  "2341205884529028245": "Filter Group",
  "8537854309019301809": "This is also the confidence behind Piying's use of Schema definitions—allowing fixed types with dynamic layouts.",
  "2139968651747675907": "Perform `valibot` parsing, and if parsing fails, it will write a validation exception and mark it as `dirty`.",
  "2167079586077256140": "Process the RxJS pipe `pipe.toModel`",
  "314304491980374487": "Perform model-to-view conversion (`transfomer.toView`), allowing input values to be modified when written to the view.",
  "4909173552783547282": "Perform conversion processing `transfomer.toModel`  \n> These two futures may merge into one, as the pipeline can achieve more, such as debouncing.",
  "6284504305697969947": "Applicable to Orm scenarios",
  "1689207149762549552": "Input properties of compatible libraries/frameworks",
  "8815653886570924608": "Output properties of compatible libraries/frameworks",
  "5822582136818176348": "Export the `dataSource` instance through `convert` and register the `entity`",
  "8140900748365645999": "Listen to the specified control through `valueChange` and update the control's value.",
  "903384071175009273": "By passing in `context`, the component can dynamically retrieve parameters through the context.",
  "211474697240626646": "By using `field.get([])`, you can query the defined `component` configuration  \n> Even for non-form controls, the query is possible, but the returned configuration does not include control references.",
  "4401278516210119299": "By grouping, you can define containers such as `card`, `tabs`, and `navbar`, allowing controls to be displayed in different styles  \n> To a certain extent, it replaces the [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/slot)",
  "4822148391498864378": "By defining different metadata and metadata parsers, adapt to different working scenarios",
  "8449255988302560808": "By specifying metadata definitions, type-safe definitions can be parsed and used by ORM.",
  "3963725331977485171": "By adding metadata support, the ORM definition and type definition are combined into one, making management more convenient.",
  "1109032047741382816": "Logical OR/AND",
  "7905472181288812355": "Although attributes in the configuration are divided into four types, their behavior varies across different libraries/frameworks. For example, in `React`, `Attribute`, `Input`, and `Output` are merged together and passed as a single input to the component.",
  "367359449842309647": "The configured general properties can be used within the current component/wrapper.",
  "4386449032482258827": "Note that the moved position must be parsed first.",
  "8929633343167762652": "The internationalization of `wrappers` and `groups` that require self-implementation of verification needs to be implemented by yourself.",
  "4870486845916972510": "Static Property",
  "6701610097321275225": "Static parsing part",
  "383177531944524816": "Non-form control components",
  "9140568832968454150": "Predefined validation Action, already exists internationalization on `valibot`",
  "6199461778127369329": "Verify",
  "6782449427950026009": "Validation and control components are completely decoupled; they need to be implemented manually, and only related control states are provided.",
  "6603239672487831028": "High cohesion, low coupling; dynamically configure through adding or removing configurations",
  "8931984317790526076": "Advanced Customization",
  "5119919885418919135": "By default, after dynamic parsing, most scenarios can be used directly.",
  "6735707648165510781": "By default, changes are triggered directly. After setting `updateOn: 'blur'`, you need to wait for the `touched` event to be emitted.",
  "7727666512987859558": "By default, it replaces the current class, but you can also set it to `true` to merge with existing classes.",
  "5144760924156081460": "Default value",
  "9031301241060936147": "By default, for example when using `v.string()`, it will automatically look up the registered `string` configuration; however, you can also use this method to manually specify it.",
  "7063127021049097214": "By default, since valibot is strongly typed, all inputs are considered form controls by default. If you want to define them as non-form controls, you can use `v.optional(v.void())`, which represents an impossible value.",
  "6654936285331109296": "A basic object component is provided by default to display internal child components.",
  "8044044696511750096": "Playground",
  "9082781386050595065": "Preview",
  "3967836601573629321": "Code",
  "7304804787084703335": "Home",
  "5663341488582522474": "Document",
  "7807636449017554161": "Introduction",
  "9216117865911519658": "Action",
  "6347577505140945932": "Component Usage (Use Case)",
  "6437329570367970266": "Form Usage (Use Case)",
  "4750362201975308629": "Migration",
  "3737834286630446263": "ngx-formly",
  "1519951518158213347": "vee-validate",
  "4512331068570345648": "formik",
  "2417676543005498525": "react-hook-form",
  "6891198962450371917": "react-tanstack",
  "3793258136716602256": "Difference",
  "1298133550706786507": "Vue",
  "1407426312530771175": "React",
  "8689675581665875697": "Frontend Form Solution",
  "5908126940154456003": "Piying provides fast component layout, positioning, event fusion listening, form design, validation, partition disabling, type safety, and other features that can be used on any platform.",
  "2562848814003371959": "View Use Cases",
  "6524332794911304168": "Evaluation",
  "6270788596078726352": "Using Piying"
}