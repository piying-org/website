{
  "8044044696511750096": "Playground",
  "7304804787084703335": "Home Page",
  "6466167068076818338": "Join test",
  "5663341488582522474": "Document",
  "7807636449017554161": "Introduction",
  "4707791770500562346": "Installation",
  "3713218421079785836": "Client",
  "2864635957462559808": "Component Usage",
  "6654092053584961242": "Form Usage",
  "2395404919385499367": "Server-side",
  "5010537385816875614": "**If you meet the following conditions, you can try the following piying**",
  "1322945422952317070": "**If you meet the following conditions, piying is not suitable for you**",
  "8412000689545871692": "**If you meet the following conditions, piying is suitable for you**",
  "2794647905908720166": "`Angular`",
  "7409171943221926377": "`NFCSchema`: `NonFieldControlSchema`",
  "2613933043957121983": "`Vue`",
  "8009353098870898924": "The `list` attribute accepts a path or undefined. It queries the corresponding control through the path and listens for changes in the input value.",
  "8092751764605584214": "`v.intersect()` + `asVirtualGroup` can perform multi-level virtual groups",
  "4326451316525534886": "typeorm",
  "2695741515345689644": "Context",
  "6511725295967825409": "Why use piying?",
  "8916537472669748089": "For example",
  "4940897137127057103": "You can also use group to perform validation only in specific groups.",
  "2119146926133144794": "Event Output",
  "2370971840764051165": "Event output allows listening to multiple components and multiple outputs at the same time, and then processes them based on their output logic relationships.",
  "2821900253069411107": "In any case, you can add `v.array()` to define a type that is not specified in the type definition, indicating it as an array.",
  "2614371932351079648": "Create controls dynamically using `defer`",
  "3293556844005822763": "Use `valueChange` to listen to the control and handle changes.",
  "5026775968723489247": "Using npm package for testing\n> To be released\\n",
  "2717337146994444101": "You can use object to define multi-level data structures.",
  "4906175811249072254": "Use Display",
  "7460961669942764224": "After using this declaration, you must manually specify a definite component name using `setComponent`.",
  "7539788671656705072": "Modify other values in the form when the value changes",
  "680312537850246143": "Value Change Listener",
  "48743016821659234": "Different types of metadata allow the same definition to be used in different scenarios simultaneously, enabling data type changes to be synchronized and reducing communication costs.",
  "1650040593542307441": "Reduce code writing",
  "5507170529496155853": "Reduce code coupling and increase code reuse.",
  "2095256808838468994": "Reducing reliance on the underlying framework makes the code more generic.",
  "5920669653157437949": "Reduce maintenance costs",
  "6612840890007855543": "Partition Disable",
  "6503772594833286737": "Create multiple components",
  "8803694132217552613": "Dynamic change, supports Promise, Observable",
  "2199030438708211389": "Dynamic parsing part",
  "5675717861725414708": "Feedback",
  "8421685944803272066": "Feedback to the corresponding issue on the website",
  "6783422218390840822": "Send an email to `wszgrcy@gmail.com`, noting: piying test; join the group to discuss",
  "8748914583681704519": "You can use `wrapper` to wrap it once.",
  "5379927071334708594": "Each `mini program` is separated into view/logic, and requires static parsing to generate the template first.",
  "5100525730061425158": "Foreign Key Reference",
  "515322405733748214": "If you encounter any issues, feel free to provide feedback to `wszgrcy@gmail.com`",
  "3975329606844517378": "Field Grouping",
  "2839668173576519178": "Client Introduction",
  "5969721114243751042": "Client Scenario",
  "1880815502043697908": "The playground for the client part is now available at [Web Access](/playground/group/form), welcome to test it out.",
  "4268176488185084713": "In some small scenarios, static parsing is required because the view and logic are separated. The definitions are first parsed into corresponding templates and written to files, then combined with dynamic parsing for assignment.",
  "5132124811836452766": "Nested definition",
  "7343278444451428466": "Layout Move",
  "1796852191637047197": "Hope to use piying instead of a certain framework",
  "7755346904303834871": "Platform independent; as long as the parser is implemented for the corresponding platform, it will work properly.",
  "5712229207891027747": "Application Scenario",
  "6572228286086377595": "When the main scenario is primarily interactive input, data needs to be validated and transformed.",
  "8834528211326730134": "Currently supported",
  "7364950739177326435": "Use when certain fields in a form can or cannot be filled in certain scenarios.",
  "2463240481454031191": "Must-implement part, used to dynamically parse the definition into configuration",
  "9089392007205821708": "You can also customize the object component and modify the display method.",
  "4873738061654840487": "You can test it in the [Playground](/playground/group/form).\\n",
  "1047498010145358144": "All configuration operations are based on `rawConfig`, which allows modifying many low-level settings and enables developers to define their own configurations freely.",
  "6975232701506920768": "Improve page performance rather than improve development efficiency",
  "7753728397451924514": "Support automatic parsing of nested definitions and convert them into table definitions",
  "4168624687289523901": "Array",
  "4171393229243610383": "More efficient and secure form creation",
  "4523453167246662757": "More convenient layout",
  "2539537157883153440": "Introduction to the Server Side",
  "4724796251949366243": "Server-side scenario",
  "8604725351299060109": "The logic that could have been reused was unable to be duplicated due to certain features, resulting in the need for new code.",
  "2445983431105943030": "The larger the weight, the later the component appears.",
  "7013081777799027431": "Tree Entity Definition Reference",
  "3527678917567115449": "This feature can also be used in components. Since components do not need to consider types, it is easy to perform various layouts. However, in forms, the data structure often does not match the view layout. In such cases, you need to move components while ensuring the data structure remains normal.",
  "3376582029892431350": "Each page's implementation is different and there are no reusable components.",
  "54978990630644301": "Scroll Group",
  "2512729969602681386": "Due to the adjustment of relevant interface configurations and documentation to facilitate better usage by developers; installation is temporarily not available;\\n",
  "5727984477711897801": "Piying is basically fully compatible with the definition of valibot, so you can use `v.string()` to quickly create a component.",
  "7789523330151719193": "How does Piying support different platforms",
  "1441961653256688942": "piying is a metadata definition traverser/parser that depends on valibot",
  "6986666494649159018": "What is piying?",
  "4887833217848144520": "The initial listened value is default undefined (if no default value is set), so it needs to be skipped",
  "3200848136140970302": "Simplify ORM definition, validation, and type safety",
  "817346401648530873": "Cascade",
  "2160878348380850726": "Quick layout of components, merged monitoring, automatic lazy loading, package decoration",
  "2790194754255961960": "Customize form group control to manage the display of internal forms",
  "5831053028499888016": "Fused Scenario",
  "6117766595254356053": "Forms are also components, but forms have unified input/output",
  "3603990046363629496": "Type safety of forms, input/output conversion, validation, partitioned disable",
  "5401644757041843989": "Type-safe implementation of forms",
  "588875283703603349": "View Logic Separation",
  "8541982184339790996": "Bridge between the view part and the logic part",
  "3014408415754019309": "Set input properties",
  "8296903281769967667": "Output Conversion",
  "2341205884529028245": "Filter Group",
  "6284504305697969947": "Applicable to Orm scenarios",
  "8140900748365645999": "Listen to the specified control through `valueChange` and update the control's value.",
  "903384071175009273": "By passing in `context`, the component can dynamically retrieve parameters through the context.",
  "4822148391498864378": "By defining different metadata and metadata parsers, adapt to different working scenarios",
  "8449255988302560808": "By specifying metadata definitions, type-safe definitions can be parsed and used by ORM.",
  "3963725331977485171": "By adding metadata support, the ORM definition and type definition are combined into one, making management more convenient.",
  "4386449032482258827": "Note that the moved position must be parsed first.",
  "4870486845916972510": "Static Property",
  "6701610097321275225": "Static parsing part",
  "383177531944524816": "Non-form control components",
  "693395299727119787": "There is some similar logic between pages, but it cannot be reused due to certain additions.",
  "6199461778127369329": "Validation",
  "6782449427950026009": "Validation and control components are completely decoupled; they need to be implemented manually, and only related control states are provided.",
  "8931984317790526076": "Advanced Customization",
  "5119919885418919135": "By default, after dynamic parsing, most scenarios can be used directly.",
  "5144760924156081460": "Default value",
  "7063127021049097214": "By default, since valibot is strongly typed, all inputs are considered form controls by default. If you want to define them as non-form controls, you can use `v.optional(v.void())`, which represents an impossible value.",
  "6654936285331109296": "A basic object component is provided by default to display internal child components."
}