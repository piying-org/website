[
    "**如果您符合以下条件,那么您可以尝试以下皮影**",
    "**如果您符合以下条件,那么皮影不适合您**",
    "**如果您符合以下条件,那么皮影就适合您**",
    "[valibot](https://valibot.dev/guides/mental-model/)中的概念",
    "`#` 查询根级配置",
    "`..` 查询父级\n> 任何情况下`['aa']`都表示查询当前级别的自己为`aa`的控件,所以如果要查询同级别的控件,需要`['..','aa']`",
    "`@xx` 查询别名为`xx`的控件\n> 当创建了一个数组项时,别名会创建一个单独的Map保存,如果查询不到的情况下,才会查询父级",
    "`asyncValidators`异步表单验证",
    "`deletionMode`array子项被删除时,应该设置为undefined还是跳过;默认为跳过",
    "`disabledValue`禁用时值是否删除(默认删除)",
    "`disabled`是否禁用",
    "`emptyValue`当值为空时,返回的默认值\n> 仅适用于`array/group/logic group`",
    "`field.statusChanges`可以监听模型值变更",
    "`field.valueChanges`可以监听模型值变更",
    "`hidden`控制是否隐藏",
    "`list`属性接受一个路径或者undefined,通过路径查询到对应控件并监听输入值变更",
    "`object`/`intersect`/`union`/`tuple`/`array`等可以包含子组件的Schema",
    "`patchAsync`动态设置某些值,可以读取到field和上下文,支持`Promise`/`Observable`/`Signal`;非上述类型的值会直接返回",
    "`patch`与已有配置合并({...a,...b})\n> 需要注意的是,如果之前存在字段`xx`的配置,再次设置`xx`时,之前的值会被替换",
    "`pipe`输出值时可以进行防抖处理(rxjs pipe)",
    "`priority`表示优先级,数字越小,位置越靠前",
    "`remove`删除某一项",
    "`set`替换当前输入设置",
    "`signal`类型的值需要转换为`ref`才支持动态变更",
    "`transfomer`输入/输出值时进行转换",
    "`updateOn`合适输出值",
    "`v.intersect()`+`asVirtualGroup`可以进行多级虚拟组",
    "`valibot`的可以同时提供类型与验证",
    "`validators`表单验证\n> 推荐使用`valibot`的`v.check`",
    "builder实现在源码`src/app/component/form/formly/translate.builder.ts`中",
    "ngx-formly 迁移",
    "submit/debounce不直接支持,但可以使用其他逻辑代替",
    "valibot的验证会先工作,验证成功后,再执行控件验证",
    "valibot验证",
    "一般为适配不同的库/框架时使用",
    "上下文",
    "不同业务和审美也不可能造就统一的组件库",
    "与`hideWhen`,`disableWhen`类似,支持多个控件监听",
    "与`topClass`类似,只不过是设置组件自身的",
    "与`valueChange`类似",
    "与大家理解的组件一致",
    "为什么使用皮影?",
    "举例",
    "之后的使用与typeorm完全相同,也就是由之前的装饰器声明改为现在的`valibot`定义声明",
    "也可以使用group只在专门的组中进行验证",
    "事件输出",
    "事件输出允许同时监听多个组件,多个输出,然后根据其输出逻辑关系处理",
    "任何情况下,您都可以将指定类型定义外加入`v.array()`,表明为一个数组",
    "传入一个`string[]`,比如`['aa','bb']`",
    "使开发者更加关注于逻辑和布局,从琐碎事物中解放出来",
    "使用",
    "使用`defer`动态创建控件",
    "使用`intersect`时,会自动创建一个`LogicGroup`,使用此方法可以不创建控件组,而是一个普通的分组(等价于v.object)",
    "使用`v.array(v.string())`时,如果不想表示为`FieldArray`,而是仅仅想视为一个普通的类型`FieldControl`时使用",
    "使用`valueChange`监听控件并进行变更",
    "使用object可以进行多级数据结构定义",
    "使用展示",
    "使用此声明后,一定要使用`setComponent`手动指定一个确定的组件名",
    "使用相同代码在任意适配过的库/框架开发",
    "使用过不代表发射过值,可能是点击过一次,一般为触发`blur`后变成`touched`",
    "使用通用的元数据定义在不同库/框架上实现相同的开发体验",
    "值变化",
    "值变更时修改表单其他值",
    "值变更监听",
    "值恢复为默认值(如果没有传入)",
    "允许启用部分子级",
    "关键字",
    "其中`intersect`配合`asVirtualGroup`可以创建一个逻辑上的普通分组,方便布局",
    "减少对底层框架依赖使得代码更加通用",
    "减少维护成本与代码编写",
    "几乎所有的`皮影Action`都来源于此Action",
    "分区禁用",
    "分发到FieldControl级`updateValue`",
    "分组",
    "创建多个组件",
    "动态变更,支持Promise,Observable",
    "动态解析部分",
    "包含输入值`writeValue`,值变更注册函数`registerOnChange`,已用状态注册函数`registerOnTouched`,是否禁用`setDisabledState`",
    "包装器",
    "包装器可以让组件拥有额外能力",
    "包装器让开发者在封装组件的时候可以仅考虑该组件的基本功能,减少了代码耦合,增加了可维护性",
    "变更监听",
    "只能验证自身,无法以上下文值来验证\n> 如果要通过上下文来验证只能将验证写到父级",
    "可以使用`v.check`自定义验证",
    "可以使用`wrapper`套一层实现",
    "可以参考`formConfig`Action中的`validators`,`asyncValidators`",
    "可以控制组件隐藏时,是否禁用控件",
    "可以访问到父级,根据其他字段的值判断",
    "可以通过依赖注入/上下文等方式查询`PI_VIEW_FIELD_TOKEN`,获取当前定义配置",
    "各个`小程序`便是视图/逻辑分离的,需要使用静态解析先生成模板",
    "和正常开发时完全一样,在定义处配置input/output及其他属性传入",
    "国际化",
    "基本等价于`Record<string,any>`",
    "基本等价于`any[]`",
    "外键引用",
    "大部分的表单控件,输入输出是等价的,也就是控件输入`a`=>发射输出`a`,传入`a`=>写入到控件中`a`",
    "如何处理",
    "如果值没有异常/没有禁用或维持之前的值,那么可以发射获取到,否则跳过",
    "如果值禁用,不发射值",
    "如果您有相关开发经验,可以先拉取相关模板查看源码",
    "如果提供的Action不满足您的开发需要,可以自行封装",
    "字段分组",
    "安装",
    "安装以下依赖",
    "完全兼容`valibot`中的所有验证Action",
    "实现`组件`的时候,只需要实现最核心的组件内容即可,不需要将验证/标签/提示内容一并实现",
    "实现与ngx-formly官网例子一样的用例",
    "实现了多个包装器,就可以通过排列组合使组件产生多种显示效果,并且减少代码耦合,易于维护",
    "实现方式与`Advanced Layout`相同",
    "客户端",
    "客户端与服务端的元数据定义不会产生冲突,可以将不同场景的元数据定义在一块,统一验证和类型,减少沟通成本",
    "客户端介绍",
    "对于一些需要投影的组件,需要进行一些封装,然后即可进行绑定",
    "对于仅依赖传值(input/output)的组件,可以直接注册绑定",
    "对已经适配的库/框架,存在`demo`进行了一些简单的组件实现和注册,方便大家进行修改",
    "对特定的一些渲染逻辑进行适配,使得不同库/框架上都可以使用相同代码开发\n> 不同的库,组件实现方式和一些逻辑也不同,所以需要实现一个兼容层",
    "小部分场景因为视图和逻辑分离,所以需要使用静态解析,将定义先解析为对应模板并写入文件,再配合动态解析赋值",
    "嵌套定义",
    "市面上绝大多数的表单,都没有类型,往往设计表单后,还需要重新写一个类型来对输入输出进行约束",
    "布局移动",
    "希望使用皮影代替某个框架",
    "希望未来代码拥有不同框架的可迁移性",
    "平台无关,同一个定义可以可以被多个框架使用",
    "开箱即用的组件库",
    "当前后端均使用js开发时,往往遇到一个问题,就是后端的类型已经定义,但是后端返回的接口往往只有`interface`/`type`,更甚者可能连类型都没有,只是告诉有哪些字段",
    "当前后端或者其他输入解析也需要此验证时,建议使用",
    "当前支持",
    "当表单部分字段在某些场景可以/不可以被填写时使用",
    "当需要调整多个组件的布局,样式及相关显示时,就需要分组\n> `object`/`intersect`/`union`/`tuple`/`array`类型时可使用",
    "当验证比较复杂,希望在当前控件上处理时,建议使用",
    "必须实现部分,用来将定义动态解析为配置",
    "快速开始",
    "您也可以自定义object组件,修改显示方式",
    "您可以简单的理解为元数据设置",
    "所有库/框架都实现了最基础的`PiyingViewGroup`,但这个并没有任何样式,排版,所以往往需要按要求自定义",
    "所有的设置操作,都是基于`rawConfig`封装,该方法允许修改很多底层设置,方便开发者自行定义",
    "所有要使用的组件,最好都在配置中先进行注册,方便引用",
    "打开你的项目进行查看",
    "控件",
    "控件使用过/未使用过",
    "控件发出值使用;直接使用仅会模拟发出值,视图部分不变",
    "控件发射过值/未发射过值",
    "控件的值目前验证有效/无效/正在验证中",
    "控件自带验证",
    "控制`控件`何时禁用,支持多控件监听",
    "控制`组件`何时隐藏",
    "提高页面性能而不是提高开发效率\n> 这并不意味着使用皮影后速度会变得很慢,由于元数据解析会有一点开销,所以一定会被之前慢一点,但是这一点可以忽略不计.",
    "支持valibot验证/自定义验证,与表单自定义验证",
    "支持自动解析嵌套定义,转换为表定义",
    "数组",
    "是否禁用",
    "普通组件",
    "更加方便的验证机制",
    "更多支持待实现",
    "服务端",
    "服务端介绍",
    "权重越大,组件越靠后",
    "查看",
    "查询方法",
    "树实体定义引用",
    "根级`updateValue`",
    "概念",
    "模型到视图",
    "模板实例",
    "此功能在组件中也可以使用,由于组件中不需要考虑类型,所以很容易进行各种排版;但是表单中往往是数据结构与视图布局不一致,这时候就需要在保证数据结构正常的前提下,移动组件",
    "此方法也支持直接指定组件定义,但是不推荐,因为会让维护变的困难\n> 除非此组件仅在此地方使用并且只使用一次,否则还是建议先注册再使用",
    "此方法单纯为表单更新值,也就是模型到视图",
    "此概念[来源](https://valibot.dev/guides/mental-model/)于`valibot`",
    "此类方法都是用来设置组件相关属性",
    "每个页面的实现都不相同并且没有任何可以重用的组件",
    "比如JsonSchema中的`anyOf`,`oneOf`,可以轻松使用`v.intersect`,`v.union`对应的`FieldLogicGroup`进行动态切换处理",
    "注册组件",
    "滚动组",
    "然后通过皮影的解析加持后,相关验证可以完美的反馈到表单上,也就是前后端的限制变成了一样,只要数据可以回传,那么一定符合要求,减少维护成本,并且分担了后端的验证压力",
    "状态",
    "用于调整表单控件使用,非表单控件不需要",
    "由于不同库/框架有着不同实现方式,所以没法实现统一的组件库",
    "由于存在`wrapper`,所以布局的时候,顶层的组件不一定是定义组件,而有可能是wrapper,所以就需要使用此类进行设置",
    "由于类型安全的原因,设计上不支持切换",
    "皮影允许在这两个阶段内分别进行处理,完成更复杂的业务逻辑",
    "皮影可以用在哪里?",
    "皮影在所有库/框架上都实现了`ControlValueAccessor`(来自Angular)的概念,通过实现相关方法,使组件能够自动接入控件",
    "皮影如何支持不同平台",
    "皮影对于大多数普通的表单功能都已经完全覆盖,所以下面列举的问题是皮影相较于主流库而言解决",
    "皮影成功解决了这个问题,使得定义与视图并非耦合关系,允许任意显示与调整\n> 这样,你就可以定制属于设计要求的表单而不是有限的展示",
    "皮影是一个依赖 valibot 的元数据定义遍历/解析器",
    "皮影是什么?",
    "皮影没有解决哪些问题?",
    "皮影目前仅实现了`typeorm`的兼容",
    "皮影解决了哪些问题?",
    "监听控件的值变更",
    "直接与组件绑定的类,表单中的最基础单位",
    "确保当前项目可以正常运行",
    "禁用状态取决于两个值,自身是否禁用和父级是否禁用,满足其一即禁用",
    "移动组件到指定的位置",
    "第一次监听的值默认为undefined(假如没有设置默认值),所以需要跳过",
    "简化 orm 定义",
    "类型",
    "类型安全",
    "类型安全,验证",
    "级联",
    "组件",
    "组件中实现了`ControlValueAccessor`的组件",
    "组件使用",
    "组件实现",
    "组件注册支持懒加载",
    "组件的快速布局,融合监听,自动懒加载,包装修饰",
    "绝大多数表单,只做了`Group`,`Array`,`Control`三种控件,但是缺少了逻辑或/与,这就让某些逻辑实现变得复杂",
    "绝大多数表单,都没有类型安全,即使使用了元数据定义,也无法随意移动,只能根据定义顺序来显示组件",
    "统一前后端的类型及验证",
    "自定义创建表单组控制内部表单的显示",
    "融合",
    "表单",
    "表单中带`$$`属于`Signal`",
    "表单使用",
    "表单控件的model-view/view-model分离",
    "表单的类型安全,输入/输出转换,验证,分区禁用",
    "表单的类型安全实现",
    "视图到模型",
    "视图变更",
    "视图变更过?强制更新:仅与上次不同才更新,同时设置表单值",
    "视图逻辑分离",
    "触发值变更,开启异步获取值",
    "让组件附加额外的能力,比如显示控件的标签,验证内容,前后缀等组件相关,共通的东西",
    "设置别名,用于路径查询",
    "设置后状态恢复到`untouched`,`pristine`",
    "设置设置表单值",
    "设置输入属性",
    "该函数输入为一个函数,其输入变量为当前的`SchemaHandle`,可以处理所有暴露的变量",
    "请参考`JSON Schema`实现",
    "调用",
    "路径查询",
    "路径查询在`outputChange`,`valueChange`,`hideWhen`,`disableWhen`等Action中被使用",
    "输出转换",
    "过滤组",
    "进行`valibot`解析,解析失败会写入验证异常,标记为`dirty`",
    "进行rxjs管道处理`pipe.toModel`",
    "进行模型到视图转换(`transfomer.toView`),允许输入值在写入到视图时进行修改",
    "进行转换处理`transfomer.toModel`\n> 这两个未来可能合成为一个,因为管道可以实现的更多,比如防抖",
    "适用于Orm场景",
    "通过`convert`导出`dataSource`实例与注册`实体`",
    "通过`valibot`定义,可以将天然的获取到类型,并且获得最基础的类型验证,保证任何情况下,数据的类型没有问题",
    "通过`valueChange`监听指定控件,更新控件值",
    "通过传入`context`使得组件可以通过上下文动态获取参数",
    "通过使用`field.get([])`可以查询定义的`组件`配置\n> 即使非表单控件,也可以查询,只不过返回的配置中没有控件引用",
    "通过分组可以定义`card`,`tabs`,`navbar`等容器,使控件以不同风格展示\n> 在一定程度上替代了[slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/slot)",
    "通过在配置中注册组件,使得逻辑部分完全不依赖视图中的任何内容,方便未来的迁移与维护",
    "通过定义不同的元数据与元数据解析器,适应不同工作场景",
    "通过指定元数据定义,使得类型安全定义可以被解析并被orm使用",
    "通过添加元数据支持,使得Orm定义与类型定义合二为一,方便管理",
    "逻辑或/与",
    "需要注意的是,被移动的位置一定要先被解析",
    "需要自己在实现验证的`包装器`,`分组`上自行实现国际化",
    "静态属性",
    "静态解析部分",
    "非表单控件组件",
    "页面之间有一些相似的逻辑,或某些代码看起来相似",
    "预制的验证Action,`valibot`上已经存在国际化",
    "验证",
    "验证和控件组件完全解偶,需要自行实现,只提供相关控件状态",
    "高级自定义",
    "默认下动态解析后,大多数场景都可以直接使用",
    "默认下直接触发变更,设置`updateOn:'blur'`后要等待`touched`发射",
    "默认为替换当前类,也可以设置`true`合并已有类",
    "默认值",
    "默认情况下,比如使用`v.string()`时,会自动查找注册的`string`配置;但是您也可以使用此方法手动指定",
    "默认情况下,由于valibot为强类型定义,所以所有输入默认为表单控件,如果想要定义为非表单控件,可以使用`v.optional(v.void())`,表示一个不可能的值",
    "默认提供了一个基础的object组件,用来展示内部子组件"
]