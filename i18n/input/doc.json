[
    "**如果您符合以下条件,那么您可以尝试以下皮影**",
    "**如果您符合以下条件,那么皮影不适合您**",
    "**如果您符合以下条件,那么皮影就适合您**",
    "`Angular`",
    "`NFCSchema`: `NonFieldControlSchema`",
    "`Vue`",
    "`list`属性接受一个路径或者undefined,通过路径查询到对应控件并监听输入值变更",
    "`v.intersect()`+`asVirtualGroup`可以进行多级虚拟组",
    "typeorm",
    "上下文",
    "为什么使用皮影?",
    "举例",
    "也可以使用group只在专门的组中进行验证",
    "事件输出",
    "事件输出允许同时监听多个组件,多个输出,然后根据其输出逻辑关系处理",
    "任何情况下,您都可以将指定类型定义外加入`v.array()`,表明为一个数组",
    "使用`defer`动态创建控件",
    "使用`valueChange`监听控件并进行变更",
    "使用npm包测试\\n> 待发布",
    "使用object可以进行多级数据结构定义",
    "使用展示",
    "使用此声明后,一定要使用`setComponent`手动指定一个确定的组件名",
    "值变更时修改表单其他值",
    "值变更监听",
    "元数据的类型不同使得不同场景下,同一个定义可以同时被不同场景使用,从而使数据类型变更同步,减少沟通成本",
    "减少代码编写",
    "减少代码耦合,增加代码重用",
    "减少对底层框架依赖使得代码更加通用",
    "减少维护成本",
    "分区禁用",
    "创建多个组件",
    "加入测试",
    "动态变更,支持Promise,Observable",
    "动态解析部分",
    "反馈",
    "反馈到网站对应的的issue中",
    "发送邮件到`wszgrcy@gmail.com`,注明: 皮影测试;进群讨论",
    "可以使用`wrapper`套一层实现",
    "各个`小程序`便是视图/逻辑分离的,需要使用静态解析先生成模板",
    "外键引用",
    "如果遇到问题欢迎进行反馈`wszgrcy@gmail.com`",
    "字段分组",
    "安装",
    "客户端介绍",
    "客户端场景",
    "客户端部分的游乐场已经可以在[网页访问](/playground/group/form),欢迎进行测试",
    "小部分场景因为视图和逻辑分离,所以需要使用静态解析,将定义先解析为对应模板并写入文件,再配合动态解析赋值",
    "嵌套定义",
    "布局移动",
    "希望使用皮影代替某个框架",
    "平台无关,只要对应平台实现了解析器即可正常工作",
    "应用场景",
    "当主要场景主要是交互输入时,数据需要验证,转换时使用",
    "当前支持",
    "当表单部分字段在某些场景可以/不可以被填写时使用",
    "必须实现部分,用来将定义动态解析为配置",
    "您也可以自定义object组件,修改显示方式",
    "您可以到[游乐场](/playground/group/form)中进行测试\\n",
    "所有的设置操作,都是基于`rawConfig`封装,该方法允许修改很多底层设置,方便开发者自行定义",
    "提高页面性能而不是提高开发效率",
    "支持自动解析嵌套定义,转换为表定义",
    "数组",
    "更加快捷且安全的创建表单",
    "更加方便的布局",
    "服务端介绍",
    "服务端场景",
    "本来可以重用的逻辑,因为某些特性添加不得复制出一份新的代码",
    "权重越大,组件越靠后",
    "树实体定义引用",
    "此功能在组件中也可以使用,由于组件中不需要考虑类型,所以很容易进行各种排版;但是表单中往往是数据结构与视图布局不一致,这时候就需要在保证数据结构正常的前提下,移动组件",
    "每个页面的实现都不相同并且没有任何可以重用的组件",
    "滚动组",
    "由于正在调整相关接口配置及文档,以方便开发者更好使用;暂未开放安装;\\n",
    "皮影基本上完全兼容valibot的定义,所以您可以使用`v.string()`快速创建一个组件",
    "皮影如何支持不同平台",
    "皮影是一个依赖 valibot 的元数据定义遍历/解析器",
    "皮影是什么",
    "第一次监听的值默认为undefined(假如没有设置默认值),所以需要跳过",
    "简化 orm 定义,验证,类型安全",
    "级联",
    "组件使用",
    "组件的快速布局,融合监听,自动懒加载,包装修饰",
    "自定义创建表单组控制内部表单的显示",
    "融合场景",
    "表单也是组件,但是表单有统一的输入/输出",
    "表单使用",
    "表单的类型安全,输入/输出转换,验证,分区禁用",
    "表单的类型安全实现",
    "视图逻辑分离",
    "视图部分与逻辑部分的桥梁",
    "设置输入属性",
    "输出转换",
    "过滤组",
    "适用于Orm场景",
    "通过`valueChange`监听指定控件,更新控件值",
    "通过传入`context`使得组件可以通过上下文动态获取参数",
    "通过定义不同的元数据与元数据解析器,适应不同工作场景",
    "通过指定元数据定义,使得类型安全定义可以被解析并被orm使用",
    "通过添加元数据支持,使得Orm定义与类型定义合二为一,方便管理",
    "需要注意的是,被移动的位置一定要先被解析",
    "静态属性",
    "静态解析部分",
    "非表单控件组件",
    "页面之间有一些相似的逻辑,但是因为某些添加导致无法重用",
    "验证",
    "验证和控件组件完全解偶,需要自行实现,只提供相关控件状态",
    "高级自定义",
    "默认下动态解析后,大多数场景都可以直接使用",
    "默认值",
    "默认情况下,由于valibot为强类型定义,所以所有输入默认为表单控件,如果想要定义为非表单控件,可以使用`v.optional(v.void())`,表示一个不可能的值",
    "默认提供了一个基础的object组件,用来展示内部子组件"
]